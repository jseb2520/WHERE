{"version":3,"sources":["components/sidebar/sidebarStyle.scss","components/itemSidebar/itemSidebarStyle.scss","components/content/contentStyle.scss","layouts/main/mainStyle.scss","serviceWorker.js","components/itemSidebar/ItemSidebarComponent.js","components/sidebar/SidebarComponent.js","components/content/ContentComponent.js","components/content/ContentContainer.js","layouts/main/index.jsx","views/home/HomeView.js","views/projects/ProjectsView.jsx","views/products/ProductsView.jsx","views/services/ServicesView.jsx","views/about/AboutView.jsx","router/Router.jsx","App.js","index.js"],"names":["module","exports","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ItemSidebarComponent","props","toggleHover","to","url","className","div","onMouseEnter","onMouseLeave","style","animatedWidth","namePage","iconComponent","HomeOutlined","ToolOutlined","ShoppingOutlined","RocketOutlined","TeamOutlined","getIcon","span","animatedFontSize","defaultProps","SidebarComponent","useState","panel","setPanel","$animatePanelRef","useRef","useSpring","duration","ease","ref","width","from","$animateTextPanelRef","fontSize","useChain","onClick","href","LeftOutlined","RightOutlined","map","link","i","key","icon","text","ContentComponent","margin","children","ContentContainer","MainLayout","HomeView","ProjectsView","Router","exact","path","component","withRouter","ServicesView","ProductsView","AboutView","App","ReactDOM","hydrate","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d8efdce7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerWidth\":\"180px\",\"textMd\":\"var(--text-md)\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerWidth\":\"180px\",\"textMd\":\"var(--text-md)\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerWidth\":\"180px\",\"textMd\":\"var(--text-md)\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"drawerWidth\":\"180px\",\"textMd\":\"var(--text-md)\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Link} from 'react-router-dom'\nimport {animated} from 'react-spring'\nimport {\n  HomeOutlined,\n  ToolOutlined,\n  ShoppingOutlined,\n  RocketOutlined,\n  TeamOutlined,\n} from '@ant-design/icons'\n// import Colors from '../../assets/theme/colors'\nimport './itemSidebarStyle.scss';\n\n\nexport default function ItemSidebarComponent(props) {\n\n  console.log('ItemSidebarComponent/props: ', props)\n\n  const getIcon = (namePage) => {\n    let iconComponent\n    switch(namePage) {\n      case 'Home' : {\n        iconComponent = <HomeOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Services' : {\n        iconComponent = <ToolOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Products' : {\n        iconComponent = <ShoppingOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Projects' : {\n        iconComponent = <RocketOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'About us' : {\n        iconComponent = <TeamOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      default : return null\n    }\n    return iconComponent\n  }\n\n  const toggleHover = () => {\n    //setHover(!hover)\n  }\n  return (\n    <Link to= {props.url} className= \"link\">\n      <animated.div\n        className = \"container-item-sidebar\"\n        onMouseEnter = {toggleHover} \n        onMouseLeave = {toggleHover}\n        style= {props.animatedWidth}\n      >\n        <div className = \"container-item-sidebar-icon\">\n          {getIcon(props.namePage)}\n        </div>\n        <div className = \"container-item-sidebar-text\">\n          <animated.span className = \"text\" style = { props.animatedFontSize }>{props.namePage}</animated.span>\n        </div>\n      </animated.div>\n    </Link>\n  )\n}\n\nItemSidebarComponent.defaultProps = {\n  namePage: 'Hello World',\n}\n\nItemSidebarComponent.propTypes = {\n  namePage : PropTypes.string,\n}\n","import React, {useState, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {animated} from 'react-spring'\nimport './sidebarStyle.scss';\nimport ItemSidebarComponent from '../itemSidebar/ItemSidebarComponent'\nimport {useSpring, useChain} from 'react-spring';\nimport {LeftOutlined, RightOutlined} from '@ant-design/icons';\n\n\nexport default function SidebarComponent(props) {\n\n  const MIN_FONT = 0\n  const MAX_FONT = 21\n  const MAX_WIDTH_PANEL = 180\n  const MIN_WIDTH_PANEL = 50\n  const ANIMATE_TEXT_DURATION = 250\n  const ANIMATE_PANEL_DURATION = 150\n\n  let [panel, setPanel] = useState(true)\n  const $animatePanelRef = useRef()\n  const animatedWidth= useSpring({ \n    config: { duration: ANIMATE_PANEL_DURATION, ease: 'expOut' },\n    ref: $animatePanelRef,\n    width: panel ? MAX_WIDTH_PANEL :  MIN_WIDTH_PANEL,\n    from: {width : panel ? MIN_WIDTH_PANEL :  MAX_WIDTH_PANEL}\n  })\n\n\n  const $animateTextPanelRef = useRef()\n  const animatedFontSize = useSpring({\n    config: { duration: ANIMATE_TEXT_DURATION, ease: 'expIn' },\n    ref: $animateTextPanelRef,\n    fontSize : panel ? MAX_FONT : MIN_FONT,\n    from : {fontSize : panel ? MIN_FONT :  MAX_FONT }\n  })\n\n  useChain( panel ? \n    [$animatePanelRef, $animateTextPanelRef ] : \n    [$animateTextPanelRef, $animatePanelRef]\n  )\n\n  const togglePanel = () => {\n    console.log('panel hided: ', panel)\n    setPanel(!panel)\n  }\n\n  const links = [\n    {\n      namePage : 'Home',\n      url: '/'\n    },\n    {\n      namePage : 'Services',\n      url: '/services'\n    },\n    {\n      namePage : 'Products',\n      url: '/products'\n    },\n    {\n      namePage : 'Projects',\n      url: '/projects'\n    },\n    {\n      namePage : 'About us',\n      url: '/about'\n    }\n  ]\n\n  return (\n    <animated.div className='container-sidebar'>\n      <a onClick={togglePanel} className=\"container-toggle-panel\" href=\"#pablo\">\n        {panel ? (\n          <LeftOutlined className=\"icon-toggle-panel\" />\n        ) : (\n          <RightOutlined className=\"icon-toggle-panel\" />\n        )}\n      </a>\n      <div className = \"container-links\">\n      {\n        links.map((link,i) => {\n          return (\n            <ItemSidebarComponent\n              key={i}\n              animatedFontSize = {animatedFontSize}\n              animatedWidth = {animatedWidth}\n              namePage = {link.namePage}\n              url= {link.url}\n              icon = {link.icon}\n            />\n          )\n        })\n      }\n      </div>\n    </animated.div>\n  )\n}\n\nSidebarComponent.defaultProps = {\n  text: 'Hello World',\n}\n\nSidebarComponent.propTypes = {\n  text : PropTypes.string,\n  number : PropTypes.number\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {animated} from 'react-spring';\nimport './contentStyle.scss';\n\nexport default function ContentComponent({margin, children}) {\n\treturn <animated.div className='container-content'>{children}</animated.div>;\n}\n\nContentComponent.defaultProps = {};\n\nContentComponent.propTypes = {\n\ttext: PropTypes.string,\n\tnumber: PropTypes.number,\n};\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport ContentComponent from './ContentComponent';\n\nexport default function ContentContainer({children}) {\n  //Here all methods and state\n\treturn <ContentComponent>{children}</ContentComponent>;\n}\n\nContentContainer.defaultProps = {};\n\nContentContainer.propTypes = {};\n","import React, {useState, useRef} from 'react';\n// import PropTypes from 'prop-types';\nimport SidebarComponent from '../../components/sidebar/SidebarComponent';\nimport ContentContainer from '../../components/content/ContentContainer';\n\nimport './mainStyle.scss';\n\nexport default function MainLayout({children}) {\n\n\treturn (\n\t\t<div className=\"container-main\">\n      <SidebarComponent/>\n\t\t\t<ContentContainer className= \"container-content\">\n\t\t\t\t{children}\n\t\t\t</ContentContainer>\n\t\t</div>                                \n\t);\n}\n\nMainLayout.defaultProps = {};\n\nMainLayout.propTypes = {};\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nexport default function HomeView() {\n\treturn <h1>Hello from Home</h1>;\n}\n\nHomeView.defaultProps = {};\n\nHomeView.propTypes = {};\n","import React from 'react';\n\nconst ProjectsView = () => {\n\treturn <h1>Hello from Projects</h1>;\n};\n\nexport default ProjectsView;\n","import React from 'react';\n\nconst ProjectsView = () => {\n\treturn <h1>Hello from Products</h1>;\n};\n\nexport default ProjectsView;\n","import React from 'react';\n\nconst ProjectsView = () => {\n\treturn <h1>Hello from Services</h1>;\n};\n\nexport default ProjectsView;\n","import React from 'react';\n\nconst ProjectsView = () => {\n\treturn <h1>Hello from About Us</h1>;\n};\n\nexport default ProjectsView;\n","import React from 'react'\nimport {\n  BrowserRouter, \n  Switch,\n  withRouter,\n  Route} from 'react-router-dom'\n\n//Views\nimport HomeView from '../views/home/HomeView'\nimport ProjectsView from '../views/projects/ProjectsView'\nimport ProductsView from '../views/products/ProductsView'\nimport ServicesView from '../views/services/ServicesView'\nimport AboutView from '../views/about/AboutView'\n\nexport default function Router() {\n  return (\n    <>\n      <Switch>\n        <Route exact path=\"/\" component= {withRouter(HomeView)}/>\n        <Route path=\"/projects\" component= {withRouter(ProjectsView)}/>\n        <Route path=\"/services\" component= {withRouter(ServicesView)}/>\n        <Route path=\"/products\" component= {withRouter(ProductsView)}/>\n        <Route path=\"/about\" component= {withRouter(AboutView)}/>\n      </Switch>\n    </>\n  )\n}\n","import React from 'react'\nimport MainLayout from './layouts/main'\nimport Router from './router/Router'\n\nconst App = () => {\n\treturn (\n        <MainLayout>\n            <Router/>\n        </MainLayout>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/index.scss'\nimport {BrowserRouter} from 'react-router-dom'\nimport App from './App';\n\nReactDOM.hydrate(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}