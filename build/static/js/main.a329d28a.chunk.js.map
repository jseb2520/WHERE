{"version":3,"sources":["components/itemSidebar/ItemSidebarComponent.js","components/sidebar/SidebarComponent.js","components/content/ContentComponent.js","components/content/ContentContainer.js","views/home/HomeView.js","views/home/HomeContainer.js","serviceWorker.js","index.js"],"names":["ItemSidebarComponent","props","useState","toggleHover","className","onMouseEnter","onMouseLeave","namePage","iconComponent","HomeOutlined","ToolOutlined","ShoppingOutlined","RocketOutlined","TeamOutlined","getIcon","span","style","fontSize","SidebarComponent","console","log","width","div","buttonTogglePanel","map","link","icon","defaultProps","text","ContentComponent","marginLeft","margin","ContentContainer","HomeView","onClick","togglePanel","LeftOutlined","widthPanel","fontSizePanel","marginLeftContent","HomeContainer","panel","setPanel","animatePanelRef","useRef","animatePanel","useSpring","config","duration","ease","ref","animateTextPanelRef","animateTextPanel","useChain","Boolean","window","location","hostname","match","ReactDOM","hydrate","title","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a329d28a.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\nimport {animated} from 'react-spring'\nimport {\n  HomeOutlined,\n  ToolOutlined,\n  ShoppingOutlined,\n  RocketOutlined,\n  TeamOutlined,\n} from '@ant-design/icons'\nimport Colors from '../../assets/theme/colors'\nimport './itemSidebarStyle.scss';\n\n\nexport default function ItemSidebarComponent(props) {\n\n  let [hover, setHover] = useState(false)\n\n  const getIcon = (namePage) => {\n    let iconComponent\n    switch(namePage) {\n      case 'Home' : {\n        iconComponent = <HomeOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Services' : {\n        iconComponent = <ToolOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Products' : {\n        iconComponent = <ShoppingOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'Projects' : {\n        iconComponent = <RocketOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      case 'About us' : {\n        iconComponent = <TeamOutlined className=\"icon-item-sidebar\"/>\n        break\n      }\n      default : return null\n    }\n    return iconComponent\n  }\n\n  const toggleHover = () => {\n    //setHover(!hover)\n  }\n  return (\n    <a \n      className = \"container-item-sidebar\"\n      onMouseEnter = {toggleHover} \n      onMouseLeave = {toggleHover} \n    >\n      <div className = \"container-item-sidebar-icon\">\n        {getIcon(props.namePage)}\n      </div>\n      <div className = \"container-item-sidebar-text\">\n        <animated.span className = \"text\" style = {{fontSize: props.fontSize}}>{props.namePage}</animated.span>\n      </div>\n    </a>\n  )\n}\n\nItemSidebarComponent.defaultProps = {\n  namePage: 'Hello World',\n}\n\nItemSidebarComponent.propTypes = {\n  namePage : PropTypes.string,\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {animated} from 'react-spring'\nimport './sidebarStyle.scss';\nimport ItemSidebarComponent from '../itemSidebar/ItemSidebarComponent'\n\n\nexport default function SidebarComponent(props) {\n  console.log(props.width)\n\n  const links = [\n    {\n      namePage : 'Home',\n    },\n    {\n      namePage : 'Services',\n    },\n    {\n      namePage : 'Products',\n    },\n    {\n      namePage : 'Projects',\n    },\n    {\n      namePage : 'About us',\n    }\n  ]\n\n  return (\n    <animated.div className = \"container-sidebar\" style={{width: props.width}}>\n      {props.buttonTogglePanel}\n      <div className = \"container-links\">\n      {\n        links.map(link => {\n          return (\n            <ItemSidebarComponent\n              fontSize = {props.fontSize}\n              namePage = {link.namePage}\n              icon = {link.icon}\n            />\n          )\n        })\n      }\n      </div>\n    </animated.div>\n  )\n}\n\nSidebarComponent.defaultProps = {\n  text: 'Hello World',\n}\n\nSidebarComponent.propTypes = {\n  text : PropTypes.string,\n  number : PropTypes.number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {animated} from 'react-spring'\nimport './contentStyle.scss';\n\nexport default function ContentComponent(props) {\n  return (\n    <animated.div className = \"container-content\" style = {{marginLeft: props.margin}}>\n      {props.text}\n    </animated.div>\n  )\n}\n\nContentComponent.defaultProps = {\n  text: 'Hello World',\n}\n\nContentComponent.propTypes = {\n  text : PropTypes.string,\n  number : PropTypes.number\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport ContentComponent from './ContentComponent'\n\nexport default function ContentContainer(props) {\n  //Here all methods and state\n  return (\n    <ContentComponent\n      margin = {props.margin}\n    />\n  )\n}\n\nContentContainer.defaultProps = {\n\n}\n\nContentContainer.propTypes = {\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SidebarComponent from '../../components/sidebar/SidebarComponent'\nimport ContentContainer from '../../components/content/ContentContainer'\nimport {LeftOutlined} from '@ant-design/icons'\n\nimport './homeStyle.scss';\n\nexport default function HomeView(props) {\n\n  let buttonTogglePanel = (\n    <a onClick = {props.togglePanel} className = \"container-toggle-panel\">\n      <LeftOutlined className = \"icon-toggle-panel\"/>\n    </a>\n  )\n\n  return (\n    <div className = \"container-home\">\n      <SidebarComponent\n        text = {'Hola'}\n        width = {props.widthPanel}\n        fontSize = {props.fontSizePanel}\n        buttonTogglePanel = {buttonTogglePanel}\n      />\n      <ContentContainer\n        text = {'Hola'}\n        margin = {props.marginLeftContent}\n      />\n    </div>\n  );\n}\n\nHomeView.defaultProps = {\n\n}\n\nHomeView.propTypes = {\n\n}\n","import React, {useState, useRef} from 'react'\nimport PropTypes from 'prop-types';\nimport {useSpring, useChain} from 'react-spring'\nimport HomeView from './HomeView'\n\nexport default function HomeContainer(props) {\n\n  let [panel, setPanel] = useState(true)\n  const animatePanelRef = useRef()\n  const animatePanel = useSpring({ \n    config: { duration: 250, ease: 'expIn' },\n    ref: animatePanelRef,\n    width: panel ? 180 : 42,\n    marginLeft: panel ? 180 : 42,\n  })\n  const animateTextPanelRef = useRef()\n\n  const animateTextPanel = useSpring({\n    config: { duration: 300, ease: 'expIn' },\n    ref: animateTextPanelRef,\n    fontSize : panel ? 21 : 0 \n  })\n\n  useChain(panel ? [animatePanelRef, animateTextPanelRef ]: [animateTextPanelRef, animatePanelRef])\n  const togglePanel = () => {\n    console.log('panel hided: ', panel)\n    setPanel(!panel)\n  }\n\n  return (\n    <HomeView\n      widthPanel = {animatePanel.width}\n      marginLeftContent = {animatePanel.marginLeft}\n      fontSizePanel = {animateTextPanel.fontSize}\n      panel = {panel}\n      togglePanel = {togglePanel}\n    />\n  )\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport HomeContainer from './views/home/HomeContainer';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/index.scss'\n\nReactDOM.hydrate(\n  <HomeContainer \n    title = {'hola'}\n  />, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}